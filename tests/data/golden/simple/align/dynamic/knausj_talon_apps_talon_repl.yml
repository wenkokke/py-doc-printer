input:
  doc:
    docs:
    - cells:
      - docs:
        - text: win.title
          type: Text
        - text: ':'
          type: Text
        type: Cat
      - text: /repl/
        type: Text
      info:
        hpad:
          text: ' '
        hsep:
          text: ' '
        min_col_widths: []
        table_type: match
      type: Row
    - cells:
      - docs:
        - text: win.title
          type: Text
        - text: ':'
          type: Text
        type: Cat
      - docs:
        - text: /Talon
          type: Text
        - type: Space
        - text: '-'
          type: Text
        - type: Space
        - text: REPL/
          type: Text
        type: Cat
      info:
        hpad:
          text: ' '
        hsep:
          text: ' '
        min_col_widths: []
        table_type: match
      type: Row
    - text: '-'
      type: Text
    - type: Line
    - text: 'tag():'
      type: Text
    - type: Space
    - text: user.talon_python
      type: Text
    - type: Line
    - type: Line
    - text: '#'
      type: Text
    - type: Space
    - text: uncomment
      type: Text
    - type: Space
    - text: user.talon_populate_lists
      type: Text
    - type: Space
    - text: tag
      type: Text
    - type: Space
    - text: to
      type: Text
    - type: Space
    - text: activate
      type: Text
    - type: Space
    - text: talon-specific
      type: Text
    - type: Space
    - text: lists
      type: Text
    - type: Space
    - text: of
      type: Text
    - type: Space
    - text: actions,
      type: Text
    - type: Space
    - text: scopes,
      type: Text
    - type: Space
    - text: modes
      type: Text
    - type: Space
    - text: etcetera.
      type: Text
    - type: Line
    - text: '#'
      type: Text
    - type: Space
    - text: Do
      type: Text
    - type: Space
    - text: not
      type: Text
    - type: Space
    - text: enable
      type: Text
    - type: Space
    - text: this
      type: Text
    - type: Space
    - text: tag
      type: Text
    - type: Space
    - text: with
      type: Text
    - type: Space
    - text: dragon,
      type: Text
    - type: Space
    - text: as
      type: Text
    - type: Space
    - text: it
      type: Text
    - type: Space
    - text: will
      type: Text
    - type: Space
    - text: be
      type: Text
    - type: Space
    - text: unusable.
      type: Text
    - type: Line
    - text: '#'
      type: Text
    - type: Space
    - text: with
      type: Text
    - type: Space
    - text: conformer,
      type: Text
    - type: Space
    - text: the
      type: Text
    - type: Space
    - text: latency
      type: Text
    - type: Space
    - text: increase
      type: Text
    - type: Space
    - text: may
      type: Text
    - type: Space
    - text: also
      type: Text
    - type: Space
    - text: be
      type: Text
    - type: Space
    - text: unacceptable
      type: Text
    - type: Space
    - text: depending
      type: Text
    - type: Space
    - text: 'on'
      type: Text
    - type: Space
    - text: your
      type: Text
    - type: Space
    - text: cpu
      type: Text
    - type: Line
    - text: '#'
      type: Text
    - type: Space
    - text: see
      type: Text
    - type: Space
    - text: https://github.com/knausj85/knausj_talon/issues/600
      type: Text
    - type: Line
    - text: '#'
      type: Text
    - type: Space
    - text: 'tag():'
      type: Text
    - type: Space
    - text: user.talon_populate_lists
      type: Text
    - type: Line
    - type: Line
    - text: ^
      type: Text
    - text: test
      type: Text
    - type: Space
    - text: last
      type: Text
    - text: $
      type: Text
    - text: ':'
      type: Text
    - doc:
        docs:
        - type: Line
        - text: phrase
          type: Text
        - type: Space
        - text: '='
          type: Text
        - type: Space
        - text: user.history_get
          type: Text
        - text: (
          type: Text
        - text: '1'
          type: Text
        - text: )
          type: Text
        - type: Line
        - text: command
          type: Text
        - type: Space
        - text: '='
          type: Text
        - type: Space
        - doc:
            docs:
            - text: sim('
              type: Text
            - text: '{'
              type: Text
            - text: phrase
              type: Text
            - text: '}'
              type: Text
            - text: ''')'
              type: Text
            type: Cat
          function: _smart_quote
          type: Edit
        - type: Line
        - text: insert
          type: Text
        - text: (
          type: Text
        - text: command
          type: Text
        - text: )
          type: Text
        - type: Line
        - text: key
          type: Text
        - text: (
          type: Text
        - text: enter
          type: Text
        - text: )
          type: Text
        - type: Line
        type: Cat
      indent: 4
      overlap: false
      type: Nest
    - text: ^
      type: Text
    - text: test
      type: Text
    - type: Space
    - text: <
      type: Text
    - text: phrase
      type: Text
    - text: '>'
      type: Text
    - text: $
      type: Text
    - text: ':'
      type: Text
    - doc:
        docs:
        - type: Line
        - text: insert
          type: Text
        - text: (
          type: Text
        - doc:
            docs:
            - text: sim('
              type: Text
            - text: '{'
              type: Text
            - text: phrase
              type: Text
            - text: '}'
              type: Text
            - text: ''')'
              type: Text
            type: Cat
          function: _smart_quote
          type: Edit
        - text: )
          type: Text
        - type: Line
        - text: key
          type: Text
        - text: (
          type: Text
        - text: enter
          type: Text
        - text: )
          type: Text
        - type: Line
        type: Cat
      indent: 4
      overlap: false
      type: Nest
    - text: ^
      type: Text
    - text: test
      type: Text
    - type: Space
    - text: numb
      type: Text
    - type: Space
    - text: <
      type: Text
    - text: number_small
      type: Text
    - text: '>'
      type: Text
    - text: $
      type: Text
    - text: ':'
      type: Text
    - doc:
        docs:
        - type: Line
        - text: phrase
          type: Text
        - type: Space
        - text: '='
          type: Text
        - type: Space
        - text: user.history_get
          type: Text
        - text: (
          type: Text
        - text: number_small
          type: Text
        - text: )
          type: Text
        - type: Line
        - text: command
          type: Text
        - type: Space
        - text: '='
          type: Text
        - type: Space
        - doc:
            docs:
            - text: sim('
              type: Text
            - text: '{'
              type: Text
            - text: phrase
              type: Text
            - text: '}'
              type: Text
            - text: ''')'
              type: Text
            type: Cat
          function: _smart_quote
          type: Edit
        - type: Line
        - text: '#'
          type: Text
        - type: Space
        - text: to
          type: Text
        - type: Space
        - text: 'do:'
          type: Text
        - type: Space
        - text: shouldn't
          type: Text
        - type: Space
        - text: this
          type: Text
        - type: Space
        - text: work?
          type: Text
        - type: Line
        - text: '#'
          type: Text
        - type: Space
        - text: user.paste("sim({phrase})")
          type: Text
        - type: Line
        - text: insert
          type: Text
        - text: (
          type: Text
        - text: command
          type: Text
        - text: )
          type: Text
        - type: Line
        - text: key
          type: Text
        - text: (
          type: Text
        - text: enter
          type: Text
        - text: )
          type: Text
        - type: Line
        type: Cat
      indent: 4
      overlap: false
      type: Nest
    - text: '#'
      type: Text
    - type: Space
    - text: requires
      type: Text
    - type: Space
    - text: user.talon_populate_lists
      type: Text
    - type: Space
    - text: tag.
      type: Text
    - type: Space
    - text: do
      type: Text
    - type: Space
    - text: not
      type: Text
    - type: Space
    - text: use
      type: Text
    - type: Space
    - text: with
      type: Text
    - type: Space
    - text: dragon
      type: Text
    - type: Line
    - text: ^
      type: Text
    - text: debug
      type: Text
    - type: Space
    - text: action
      type: Text
    - type: Space
    - text: '{'
      type: Text
    - text: user.talon_actions
      type: Text
    - text: '}'
      type: Text
    - text: $
      type: Text
    - text: ':'
      type: Text
    - doc:
        docs:
        - type: Line
        - text: insert
          type: Text
        - text: (
          type: Text
        - doc:
            docs:
            - text: actions.find('
              type: Text
            - text: '{'
              type: Text
            - text: user.talon_actions
              type: Text
            - text: '}'
              type: Text
            - text: ''')'
              type: Text
            type: Cat
          function: _smart_quote
          type: Edit
        - text: )
          type: Text
        - type: Line
        - text: key
          type: Text
        - text: (
          type: Text
        - text: enter
          type: Text
        - text: )
          type: Text
        - type: Line
        type: Cat
      indent: 4
      overlap: false
      type: Nest
    - text: '#'
      type: Text
    - type: Space
    - text: requires
      type: Text
    - type: Space
    - text: user.talon_populate_lists
      type: Text
    - type: Space
    - text: tag.
      type: Text
    - type: Space
    - text: do
      type: Text
    - type: Space
    - text: not
      type: Text
    - type: Space
    - text: use
      type: Text
    - type: Space
    - text: with
      type: Text
    - type: Space
    - text: dragon
      type: Text
    - type: Line
    - text: ^
      type: Text
    - text: debug
      type: Text
    - type: Space
    - text: list
      type: Text
    - type: Space
    - text: '{'
      type: Text
    - text: user.talon_lists
      type: Text
    - text: '}'
      type: Text
    - text: $
      type: Text
    - text: ':'
      type: Text
    - doc:
        docs:
        - type: Line
        - text: insert
          type: Text
        - text: (
          type: Text
        - doc:
            docs:
            - text: actions.user.talon_pretty_print(registry.lists['
              type: Text
            - text: '{'
              type: Text
            - text: talon_lists
              type: Text
            - text: '}'
              type: Text
            - text: '''])'
              type: Text
            type: Cat
          function: _smart_quote
          type: Edit
        - text: )
          type: Text
        - type: Line
        - text: key
          type: Text
        - text: (
          type: Text
        - text: enter
          type: Text
        - text: )
          type: Text
        - type: Line
        type: Cat
      indent: 4
      overlap: false
      type: Nest
    - text: ^
      type: Text
    - text: debug
      type: Text
    - type: Space
    - text: tags
      type: Text
    - text: $
      type: Text
    - text: ':'
      type: Text
    - doc:
        docs:
        - type: Line
        - text: insert
          type: Text
        - text: (
          type: Text
        - doc:
            text: actions.user.talon_pretty_print(registry.tags)
            type: Text
          function: _smart_quote
          type: Edit
        - text: )
          type: Text
        - type: Line
        - text: key
          type: Text
        - text: (
          type: Text
        - text: enter
          type: Text
        - text: )
          type: Text
        - type: Line
        type: Cat
      indent: 4
      overlap: false
      type: Nest
    - text: ^
      type: Text
    - text: debug
      type: Text
    - type: Space
    - text: settings
      type: Text
    - text: $
      type: Text
    - text: ':'
      type: Text
    - doc:
        docs:
        - type: Line
        - text: insert
          type: Text
        - text: (
          type: Text
        - doc:
            text: actions.user.talon_pretty_print(registry.settings)
            type: Text
          function: _smart_quote
          type: Edit
        - text: )
          type: Text
        - type: Line
        - text: key
          type: Text
        - text: (
          type: Text
        - text: enter
          type: Text
        - text: )
          type: Text
        - type: Line
        type: Cat
      indent: 4
      overlap: false
      type: Nest
    - text: ^
      type: Text
    - text: debug
      type: Text
    - type: Space
    - text: modes
      type: Text
    - text: $
      type: Text
    - text: ':'
      type: Text
    - doc:
        docs:
        - type: Line
        - text: insert
          type: Text
        - text: (
          type: Text
        - doc:
            text: actions.user.talon_pretty_print(scope.get('mode'))
            type: Text
          function: _smart_quote
          type: Edit
        - text: )
          type: Text
        - type: Line
        - text: key
          type: Text
        - text: (
          type: Text
        - text: enter
          type: Text
        - text: )
          type: Text
        - type: Line
        type: Cat
      indent: 4
      overlap: false
      type: Nest
    - text: '#'
      type: Text
    - type: Space
    - text: requires
      type: Text
    - type: Space
    - text: user.talon_populate_lists
      type: Text
    - type: Space
    - text: tag.
      type: Text
    - type: Space
    - text: do
      type: Text
    - type: Space
    - text: not
      type: Text
    - type: Space
    - text: use
      type: Text
    - type: Space
    - text: with
      type: Text
    - type: Space
    - text: dragon
      type: Text
    - type: Line
    - text: ^
      type: Text
    - text: debug
      type: Text
    - type: Space
    - text: scope
      type: Text
    - type: Space
    - text: '{'
      type: Text
    - text: user.talon_scopes
      type: Text
    - text: '}'
      type: Text
    - text: $
      type: Text
    - text: ':'
      type: Text
    - doc:
        docs:
        - type: Line
        - text: insert
          type: Text
        - text: (
          type: Text
        - doc:
            docs:
            - text: actions.user.talon_pretty_print(scope.get('
              type: Text
            - text: '{'
              type: Text
            - text: talon_scopes
              type: Text
            - text: '}'
              type: Text
            - text: '''))'
              type: Text
            type: Cat
          function: _smart_quote
          type: Edit
        - text: )
          type: Text
        - type: Line
        - text: key
          type: Text
        - text: (
          type: Text
        - text: enter
          type: Text
        - text: )
          type: Text
        - type: Line
        type: Cat
      indent: 4
      overlap: false
      type: Nest
    - text: ^
      type: Text
    - text: debug
      type: Text
    - type: Space
    - text: running
      type: Text
    - type: Space
    - text: apps
      type: Text
    - text: $
      type: Text
    - text: ':'
      type: Text
    - doc:
        docs:
        - type: Line
        - text: insert
          type: Text
        - text: (
          type: Text
        - doc:
            text: actions.user.talon_pretty_print(ui.apps(background=False))
            type: Text
          function: _smart_quote
          type: Edit
        - text: )
          type: Text
        - type: Line
        - text: key
          type: Text
        - text: (
          type: Text
        - text: enter
          type: Text
        - text: )
          type: Text
        - type: Line
        type: Cat
      indent: 4
      overlap: false
      type: Nest
    - text: ^
      type: Text
    - text: debug
      type: Text
    - type: Space
    - text: all
      type: Text
    - type: Space
    - text: windows
      type: Text
    - text: $
      type: Text
    - text: ':'
      type: Text
    - doc:
        docs:
        - type: Line
        - text: insert
          type: Text
        - text: (
          type: Text
        - doc:
            text: actions.user.talon_pretty_print(ui.windows())
            type: Text
          function: _smart_quote
          type: Edit
        - text: )
          type: Text
        - type: Line
        - text: key
          type: Text
        - text: (
          type: Text
        - text: enter
          type: Text
        - text: )
          type: Text
        - type: Line
        type: Cat
      indent: 4
      overlap: false
      type: Nest
    - text: ^
      type: Text
    - text: debug
      type: Text
    - type: Space
    - text: '{'
      type: Text
    - text: user.running
      type: Text
    - text: '}'
      type: Text
    - type: Space
    - text: windows
      type: Text
    - text: $
      type: Text
    - text: ':'
      type: Text
    - doc:
        docs:
        - type: Line
        - text: insert
          type: Text
        - text: (
          type: Text
        - doc:
            docs:
            - text: actions.user.talon_debug_app_windows('
              type: Text
            - text: '{'
              type: Text
            - text: running
              type: Text
            - text: '}'
              type: Text
            - text: ''')'
              type: Text
            type: Cat
          function: _smart_quote
          type: Edit
        - text: )
          type: Text
        - type: Line
        - text: key
          type: Text
        - text: (
          type: Text
        - text: enter
          type: Text
        - text: )
          type: Text
        - type: Line
        type: Cat
      indent: 4
      overlap: false
      type: Nest
    type: Cat
  max_line_width: null
  renderer: simple
  simple_layout: LongestLines
output: "win.title: /repl/\nwin.title: /Talon - REPL/\n-\ntag(): user.talon_python\n\
  \n# uncomment user.talon_populate_lists tag to activate talon-specific lists of\
  \ actions, scopes, modes etcetera.\n# Do not enable this tag with dragon, as it\
  \ will be unusable.\n# with conformer, the latency increase may also be unacceptable\
  \ depending on your cpu\n# see https://github.com/knausj85/knausj_talon/issues/600\n\
  # tag(): user.talon_populate_lists\n\n^test last$:\n    phrase = user.history_get(1)\n\
  \    command = \"sim('{phrase}')\"\n    insert(command)\n    key(enter)\n^test <phrase>$:\n\
  \    insert(\"sim('{phrase}')\")\n    key(enter)\n^test numb <number_small>$:\n\
  \    phrase = user.history_get(number_small)\n    command = \"sim('{phrase}')\"\n\
  \    # to do: shouldn't this work?\n    # user.paste(\"sim({phrase})\")\n    insert(command)\n\
  \    key(enter)\n# requires user.talon_populate_lists tag. do not use with dragon\n\
  ^debug action {user.talon_actions}$:\n    insert(\"actions.find('{user.talon_actions}')\"\
  )\n    key(enter)\n# requires user.talon_populate_lists tag. do not use with dragon\n\
  ^debug list {user.talon_lists}$:\n    insert(\"actions.user.talon_pretty_print(registry.lists['{talon_lists}'])\"\
  )\n    key(enter)\n^debug tags$:\n    insert(\"actions.user.talon_pretty_print(registry.tags)\"\
  )\n    key(enter)\n^debug settings$:\n    insert(\"actions.user.talon_pretty_print(registry.settings)\"\
  )\n    key(enter)\n^debug modes$:\n    insert(\"actions.user.talon_pretty_print(scope.get('mode'))\"\
  )\n    key(enter)\n# requires user.talon_populate_lists tag. do not use with dragon\n\
  ^debug scope {user.talon_scopes}$:\n    insert(\"actions.user.talon_pretty_print(scope.get('{talon_scopes}'))\"\
  )\n    key(enter)\n^debug running apps$:\n    insert(\"actions.user.talon_pretty_print(ui.apps(background=False))\"\
  )\n    key(enter)\n^debug all windows$:\n    insert(\"actions.user.talon_pretty_print(ui.windows())\"\
  )\n    key(enter)\n^debug {user.running} windows$:\n    insert(\"actions.user.talon_debug_app_windows('{running}')\"\
  )\n    key(enter)\n"
