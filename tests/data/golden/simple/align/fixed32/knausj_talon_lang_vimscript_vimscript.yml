input:
  doc:
    docs:
    - cells:
      - docs:
        - text: tag
          type: Text
        - text: ':'
          type: Text
        type: Cat
      - text: user.vimscript
        type: Text
      info:
        hpad:
          text: ' '
        hsep:
          text: ' '
        min_col_widths:
        - 32
        table_type: match
      type: Row
    - text: '-'
      type: Text
    - type: Line
    - text: 'tag():'
      type: Text
    - type: Space
    - text: user.code_imperative
      type: Text
    - type: Line
    - text: 'tag():'
      type: Text
    - type: Space
    - text: user.code_operators_assignment
      type: Text
    - type: Line
    - text: 'tag():'
      type: Text
    - type: Space
    - text: user.code_operators_math
      type: Text
    - type: Line
    - text: 'tag():'
      type: Text
    - type: Space
    - text: user.code_comment_line
      type: Text
    - type: Line
    - type: Line
    - text: '#'
      type: Text
    - type: Space
    - text: XXX
      type: Text
    - type: Space
    - text: '-'
      type: Text
    - type: Space
    - text: revisit
      type: Text
    - type: Space
    - text: these
      type: Text
    - type: Line
    - text: 'settings():'
      type: Text
    - doc:
        docs:
        - type: Line
        - text: user.code_private_function_formatter
          type: Text
        - type: Space
        - text: '='
          type: Text
        - type: Space
        - doc:
            text: SNAKE_CASE
            type: Text
          function: _smart_quote
          type: Edit
        - type: Line
        - text: user.code_protected_function_formatter
          type: Text
        - type: Space
        - text: '='
          type: Text
        - type: Space
        - doc:
            text: SNAKE_CASE
            type: Text
          function: _smart_quote
          type: Edit
        - type: Line
        - text: user.code_public_function_formatter
          type: Text
        - type: Space
        - text: '='
          type: Text
        - type: Space
        - doc:
            text: SNAKE_CASE
            type: Text
          function: _smart_quote
          type: Edit
        - type: Line
        - text: user.code_private_variable_formatter
          type: Text
        - type: Space
        - text: '='
          type: Text
        - type: Space
        - doc:
            text: SNAKE_CASE
            type: Text
          function: _smart_quote
          type: Edit
        - type: Line
        - text: user.code_protected_variable_formatter
          type: Text
        - type: Space
        - text: '='
          type: Text
        - type: Space
        - doc:
            text: SNAKE_CASE
            type: Text
          function: _smart_quote
          type: Edit
        - type: Line
        - text: user.code_public_variable_formatter
          type: Text
        - type: Space
        - text: '='
          type: Text
        - type: Space
        - doc:
            text: SNAKE_CASE
            type: Text
          function: _smart_quote
          type: Edit
        - type: Line
        type: Cat
      indent: 4
      overlap: false
      type: Nest
    - type: Line
    - text: '#'
      type: Text
    - type: Line
    - text: '#'
      type: Text
    - type: Space
    - text: VIM
      type: Text
    - type: Space
    - text: Script
      type: Text
    - type: Space
    - text: Specific
      type: Text
    - type: Line
    - text: '#'
      type: Text
    - type: Line
    - text: assign
      type: Text
    - type: Space
    - text: '['
      type: Text
    - text: <
      type: Text
    - text: user.vimscript_scope
      type: Text
    - text: '>'
      type: Text
    - text: ']'
      type: Text
    - type: Space
    - text: (
      type: Text
    - text: variable
      type: Text
    - type: Space
    - text: '|'
      type: Text
    - type: Space
    - text: var
      type: Text
    - text: )
      type: Text
    - type: Space
    - text: '['
      type: Text
    - text: <
      type: Text
    - text: user.text
      type: Text
    - text: '>'
      type: Text
    - text: ']'
      type: Text
    - type: Space
    - text: '['
      type: Text
    - text: over
      type: Text
    - text: ']'
      type: Text
    - text: ':'
      type: Text
    - doc:
        docs:
        - type: Line
        - text: insert
          type: Text
        - text: (
          type: Text
        - doc:
            docs:
            - text: let
              type: Text
            - type: Space
            type: Cat
          function: _smart_quote
          type: Edit
        - text: )
          type: Text
        - type: Line
        - text: insert
          type: Text
        - text: (
          type: Text
        - text: vimscript_scope
          type: Text
        - type: Space
        - text: or
          type: Text
        - type: Space
        - doc:
            type: Empty
          function: _smart_quote
          type: Edit
        - text: )
          type: Text
        - type: Line
        - text: user.code_private_variable_formatter
          type: Text
        - text: (
          type: Text
        - text: text
          type: Text
        - text: )
          type: Text
        - type: Line
        type: Cat
      indent: 4
      overlap: false
      type: Nest
    - type: Line
    - text: '['
      type: Text
    - text: <
      type: Text
    - text: user.vimscript_scope
      type: Text
    - text: '>'
      type: Text
    - text: ']'
      type: Text
    - type: Space
    - text: (
      type: Text
    - text: variable
      type: Text
    - type: Space
    - text: '|'
      type: Text
    - type: Space
    - text: var
      type: Text
    - text: )
      type: Text
    - type: Space
    - text: '['
      type: Text
    - text: <
      type: Text
    - text: user.text
      type: Text
    - text: '>'
      type: Text
    - text: ']'
      type: Text
    - type: Space
    - text: '['
      type: Text
    - text: over
      type: Text
    - text: ']'
      type: Text
    - text: ':'
      type: Text
    - doc:
        docs:
        - type: Line
        - text: insert
          type: Text
        - text: (
          type: Text
        - text: vimscript_scope
          type: Text
        - type: Space
        - text: or
          type: Text
        - type: Space
        - doc:
            type: Empty
          function: _smart_quote
          type: Edit
        - text: )
          type: Text
        - type: Line
        - text: user.code_private_variable_formatter
          type: Text
        - text: (
          type: Text
        - text: text
          type: Text
        - text: )
          type: Text
        - type: Line
        type: Cat
      indent: 4
      overlap: false
      type: Nest
    - type: Line
    - text: '#'
      type: Text
    - type: Space
    - text: see
      type: Text
    - type: Space
    - text: lang/vimscript/vimscript.py
      type: Text
    - type: Space
    - text: for
      type: Text
    - type: Space
    - text: list
      type: Text
    - type: Line
    - alts:
      - docs:
        - text: <
          type: Text
        - text: user.vimscript_functions
          type: Text
        - text: '>'
          type: Text
        - text: ':'
          type: Text
        - doc:
            docs:
            - type: Line
            - text: insert
              type: Text
            - text: (
              type: Text
            - doc:
                docs:
                - text: '{'
                  type: Text
                - text: vimscript_functions
                  type: Text
                - text: '}'
                  type: Text
                - type: Space
                type: Cat
              function: _smart_quote
              type: Edit
            - text: )
              type: Text
            - type: Line
            type: Cat
          indent: 4
          overlap: false
          type: Nest
        type: Cat
      - cells:
        - docs:
          - text: <
            type: Text
          - text: user.vimscript_functions
            type: Text
          - text: '>'
            type: Text
          - text: ':'
            type: Text
          type: Cat
        - doc:
            docs:
            - text: insert
              type: Text
            - text: (
              type: Text
            - doc:
                docs:
                - text: '{'
                  type: Text
                - text: vimscript_functions
                  type: Text
                - text: '}'
                  type: Text
                - type: Space
                type: Cat
              function: _smart_quote
              type: Edit
            - text: )
              type: Text
            - type: Line
            type: Cat
          function: _inline
          type: Edit
        info:
          hpad:
            text: ' '
          hsep:
            text: ' '
          min_col_widths:
          - 32
          table_type: command
        type: Row
      type: Alt
    - type: Line
    - text: '#'
      type: Text
    - type: Space
    - text: XXX
      type: Text
    - type: Space
    - text: '-'
      type: Text
    - type: Space
    - text: possibly
      type: Text
    - type: Space
    - text: overlap
      type: Text
    - type: Space
    - text: with
      type: Text
    - type: Space
    - text: some
      type: Text
    - type: Space
    - text: programming.talon
      type: Text
    - type: Line
    - alts:
      - docs:
        - text: state
          type: Text
        - type: Space
        - text: command
          type: Text
        - text: ':'
          type: Text
        - doc:
            docs:
            - type: Line
            - doc:
                docs:
                - text: command!
                  type: Text
                - type: Space
                type: Cat
              function: _smart_quote
              type: Edit
            - type: Line
            type: Cat
          indent: 4
          overlap: false
          type: Nest
        type: Cat
      - cells:
        - docs:
          - text: state
            type: Text
          - type: Space
          - text: command
            type: Text
          - text: ':'
            type: Text
          type: Cat
        - doc:
            docs:
            - doc:
                docs:
                - text: command!
                  type: Text
                - type: Space
                type: Cat
              function: _smart_quote
              type: Edit
            - type: Line
            type: Cat
          function: _inline
          type: Edit
        info:
          hpad:
            text: ' '
          hsep:
            text: ' '
          min_col_widths:
          - 32
          table_type: command
        type: Row
      type: Alt
    - alts:
      - docs:
        - text: state
          type: Text
        - type: Space
        - text: end
          type: Text
        - type: Space
        - text: if
          type: Text
        - text: ':'
          type: Text
        - doc:
            docs:
            - type: Line
            - doc:
                text: endif
                type: Text
              function: _smart_quote
              type: Edit
            - type: Line
            type: Cat
          indent: 4
          overlap: false
          type: Nest
        type: Cat
      - cells:
        - docs:
          - text: state
            type: Text
          - type: Space
          - text: end
            type: Text
          - type: Space
          - text: if
            type: Text
          - text: ':'
            type: Text
          type: Cat
        - doc:
            docs:
            - doc:
                text: endif
                type: Text
              function: _smart_quote
              type: Edit
            - type: Line
            type: Cat
          function: _inline
          type: Edit
        info:
          hpad:
            text: ' '
          hsep:
            text: ' '
          min_col_widths:
          - 32
          table_type: command
        type: Row
      type: Alt
    - alts:
      - docs:
        - text: state
          type: Text
        - type: Space
        - text: end
          type: Text
        - type: Space
        - text: for
          type: Text
        - text: ':'
          type: Text
        - doc:
            docs:
            - type: Line
            - doc:
                text: endfor
                type: Text
              function: _smart_quote
              type: Edit
            - type: Line
            type: Cat
          indent: 4
          overlap: false
          type: Nest
        type: Cat
      - cells:
        - docs:
          - text: state
            type: Text
          - type: Space
          - text: end
            type: Text
          - type: Space
          - text: for
            type: Text
          - text: ':'
            type: Text
          type: Cat
        - doc:
            docs:
            - doc:
                text: endfor
                type: Text
              function: _smart_quote
              type: Edit
            - type: Line
            type: Cat
          function: _inline
          type: Edit
        info:
          hpad:
            text: ' '
          hsep:
            text: ' '
          min_col_widths:
          - 32
          table_type: command
        type: Row
      type: Alt
    - alts:
      - docs:
        - text: state
          type: Text
        - type: Space
        - text: end
          type: Text
        - type: Space
        - text: while
          type: Text
        - text: ':'
          type: Text
        - doc:
            docs:
            - type: Line
            - doc:
                text: endwhile
                type: Text
              function: _smart_quote
              type: Edit
            - type: Line
            type: Cat
          indent: 4
          overlap: false
          type: Nest
        type: Cat
      - cells:
        - docs:
          - text: state
            type: Text
          - type: Space
          - text: end
            type: Text
          - type: Space
          - text: while
            type: Text
          - text: ':'
            type: Text
          type: Cat
        - doc:
            docs:
            - doc:
                text: endwhile
                type: Text
              function: _smart_quote
              type: Edit
            - type: Line
            type: Cat
          function: _inline
          type: Edit
        info:
          hpad:
            text: ' '
          hsep:
            text: ' '
          min_col_widths:
          - 32
          table_type: command
        type: Row
      type: Alt
    - alts:
      - docs:
        - text: state
          type: Text
        - type: Space
        - text: end
          type: Text
        - type: Space
        - text: function
          type: Text
        - text: ':'
          type: Text
        - doc:
            docs:
            - type: Line
            - doc:
                text: endfunction
                type: Text
              function: _smart_quote
              type: Edit
            - type: Line
            type: Cat
          indent: 4
          overlap: false
          type: Nest
        type: Cat
      - cells:
        - docs:
          - text: state
            type: Text
          - type: Space
          - text: end
            type: Text
          - type: Space
          - text: function
            type: Text
          - text: ':'
            type: Text
          type: Cat
        - doc:
            docs:
            - doc:
                text: endfunction
                type: Text
              function: _smart_quote
              type: Edit
            - type: Line
            type: Cat
          function: _inline
          type: Edit
        info:
          hpad:
            text: ' '
          hsep:
            text: ' '
          min_col_widths:
          - 32
          table_type: command
        type: Row
      type: Alt
    - alts:
      - docs:
        - text: state
          type: Text
        - type: Space
        - text: continue
          type: Text
        - text: ':'
          type: Text
        - doc:
            docs:
            - type: Line
            - doc:
                text: continue
                type: Text
              function: _smart_quote
              type: Edit
            - type: Line
            type: Cat
          indent: 4
          overlap: false
          type: Nest
        type: Cat
      - cells:
        - docs:
          - text: state
            type: Text
          - type: Space
          - text: continue
            type: Text
          - text: ':'
            type: Text
          type: Cat
        - doc:
            docs:
            - doc:
                text: continue
                type: Text
              function: _smart_quote
              type: Edit
            - type: Line
            type: Cat
          function: _inline
          type: Edit
        info:
          hpad:
            text: ' '
          hsep:
            text: ' '
          min_col_widths:
          - 32
          table_type: command
        type: Row
      type: Alt
    type: Cat
  max_line_width: null
  renderer: simple
  simple_layout: LongestLines
output: "tag:                             user.vimscript\n-\ntag(): user.code_imperative\n\
  tag(): user.code_operators_assignment\ntag(): user.code_operators_math\ntag(): user.code_comment_line\n\
  \n# XXX - revisit these\nsettings():\n    user.code_private_function_formatter =\
  \ \"SNAKE_CASE\"\n    user.code_protected_function_formatter = \"SNAKE_CASE\"\n\
  \    user.code_public_function_formatter = \"SNAKE_CASE\"\n    user.code_private_variable_formatter\
  \ = \"SNAKE_CASE\"\n    user.code_protected_variable_formatter = \"SNAKE_CASE\"\n\
  \    user.code_public_variable_formatter = \"SNAKE_CASE\"\n\n#\n# VIM Script Specific\n\
  #\nassign [<user.vimscript_scope>] (variable | var) [<user.text>] [over]:\n    insert(\"\
  let \")\n    insert(vimscript_scope or \"\")\n    user.code_private_variable_formatter(text)\n\
  \n[<user.vimscript_scope>] (variable | var) [<user.text>] [over]:\n    insert(vimscript_scope\
  \ or \"\")\n    user.code_private_variable_formatter(text)\n\n# see lang/vimscript/vimscript.py\
  \ for list\n<user.vimscript_functions>:      insert(\"{vimscript_functions} \")\n\
  \n# XXX - possibly overlap with some programming.talon\nstate command:         \
  \          \"command! \"\nstate end if:                    \"endif\"\nstate end\
  \ for:                   \"endfor\"\nstate end while:                 \"endwhile\"\
  \nstate end function:              \"endfunction\"\nstate continue:            \
  \      \"continue\"\n"
