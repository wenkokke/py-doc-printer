input:
  doc:
    docs:
    - cells:
      - docs:
        - text: tag
        - text: ':'
      - text: user.code_functions
      info:
        hpad:
          text: ' '
        hsep:
          text: ' '
        min_col_widths: []
        table_type: match
    - text: '-'
    - text: '

        '
    - text: '#'
    - text: ' '
    - text: Default
    - text: ' '
    - text: implementation
    - text: ' '
    - text: of
    - text: ' '
    - text: capture
    - text: ' '
    - text: listens
    - text: ' '
    - text: for
    - text: ' '
    - text: the
    - text: ' '
    - text: following
    - text: ' '
    - text: keywords
    - text: ' '
    - text: in
    - text: ' '
    - text: any
    - text: '

        '
    - text: '#'
    - text: ' '
    - text: 'order:'
    - text: ' '
    - text: private
    - text: ' '
    - text: pro
    - text: ' '
    - text: pub
    - text: ' '
    - text: static
    - text: '

        '
    - text: '#'
    - text: '

        '
    - text: '#'
    - text: ' '
    - text: The
    - text: ' '
    - text: default
    - text: ' '
    - text: action
    - text: ' '
    - text: implementation
    - text: ' '
    - text: looks
    - text: ' '
    - text: for
    - text: ' '
    - text: the
    - text: ' '
    - text: token
    - text: ' '
    - text: combination
    - text: ' '
    - text: 'on'
    - text: ' '
    - text: the
    - text: ' '
    - text: left
    - text: '

        '
    - text: '#'
    - text: ' '
    - text: (funky
    - text: ' '
    - text: is
    - text: ' '
    - text: added
    - text: ' '
    - text: here
    - text: ' '
    - text: for
    - text: ' '
    - text: searchability)
    - text: ' '
    - text: and
    - text: ' '
    - text: calls
    - text: ' '
    - text: the
    - text: ' '
    - text: function
    - text: ' '
    - text: 'on'
    - text: ' '
    - text: the
    - text: ' '
    - text: 'right:'
    - text: '

        '
    - text: '#'
    - text: '

        '
    - text: '#'
    - text: ' '
    - text: ' '
    - text: ' '
    - text: '*'
    - text: ' '
    - text: funky
    - text: ' '
    - text: ->
    - text: ' '
    - text: code_default_function
    - text: '

        '
    - text: '#'
    - text: ' '
    - text: ' '
    - text: ' '
    - text: '*'
    - text: ' '
    - text: private
    - text: ' '
    - text: funky
    - text: ' '
    - text: ->
    - text: ' '
    - text: code_private_function
    - text: '

        '
    - text: '#'
    - text: ' '
    - text: ' '
    - text: ' '
    - text: '*'
    - text: ' '
    - text: pro
    - text: ' '
    - text: funky
    - text: ' '
    - text: ->
    - text: ' '
    - text: code_protected_function
    - text: '

        '
    - text: '#'
    - text: ' '
    - text: ' '
    - text: ' '
    - text: '*'
    - text: ' '
    - text: pub
    - text: ' '
    - text: funky
    - text: ' '
    - text: ->
    - text: ' '
    - text: code_public_function
    - text: '

        '
    - text: '#'
    - text: ' '
    - text: ' '
    - text: ' '
    - text: '*'
    - text: ' '
    - text: static
    - text: ' '
    - text: funky
    - text: ' '
    - text: ->
    - text: ' '
    - text: code_private_static_function
    - text: '

        '
    - text: '#'
    - text: ' '
    - text: ' '
    - text: ' '
    - text: '*'
    - text: ' '
    - text: private
    - text: ' '
    - text: static
    - text: ' '
    - text: funky
    - text: ' '
    - text: ->
    - text: ' '
    - text: code_private_static_function
    - text: '

        '
    - text: '#'
    - text: ' '
    - text: ' '
    - text: ' '
    - text: '*'
    - text: ' '
    - text: pro
    - text: ' '
    - text: static
    - text: ' '
    - text: funky
    - text: ' '
    - text: ->
    - text: ' '
    - text: code_protected_static_function
    - text: '

        '
    - text: '#'
    - text: ' '
    - text: ' '
    - text: ' '
    - text: '*'
    - text: ' '
    - text: pub
    - text: ' '
    - text: static
    - text: ' '
    - text: funky
    - text: ' '
    - text: ->
    - text: ' '
    - text: code_public_static_function
    - text: '

        '
    - text: '#'
    - text: '

        '
    - alts:
      - docs:
        - text: ^
        - text: '{'
        - text: user.code_function_modifier
        - text: '}'
        - text: '*'
        - text: ' '
        - text: funky
        - text: ' '
        - text: <
        - text: user.text
        - text: '>'
        - text: $
        - text: ':'
        - doc:
            docs:
            - text: '

                '
            - text: user.code_modified_function
            - text: (
            - text: code_function_modifier_list
            - text: ' '
            - text: or
            - text: ' '
            - text: '0'
            - text: ','
            - text: ' '
            - text: text
            - text: )
            - text: '

                '
          indent: 4
          overlap: false
      - cells:
        - docs:
          - text: ^
          - text: '{'
          - text: user.code_function_modifier
          - text: '}'
          - text: '*'
          - text: ' '
          - text: funky
          - text: ' '
          - text: <
          - text: user.text
          - text: '>'
          - text: $
          - text: ':'
        - doc:
            docs:
            - text: user.code_modified_function
            - text: (
            - text: code_function_modifier_list
            - text: ' '
            - text: or
            - text: ' '
            - text: '0'
            - text: ','
            - text: ' '
            - text: text
            - text: )
            - text: '

                '
          function: _inline
        info:
          hpad:
            text: ' '
          hsep:
            text: ' '
          min_col_widths: []
          table_type: command
    - text: '

        '
    - text: '#'
    - text: ' '
    - text: for
    - text: ' '
    - text: annotating
    - text: ' '
    - text: function
    - text: ' '
    - text: parameters
    - text: '

        '
    - alts:
      - docs:
        - text: is
        - text: ' '
        - text: type
        - text: ' '
        - text: <
        - text: user.code_type
        - text: '>'
        - text: ':'
        - doc:
            docs:
            - text: '

                '
            - text: user.code_insert_type_annotation
            - text: (
            - text: code_type
            - text: )
            - text: '

                '
          indent: 4
          overlap: false
      - cells:
        - docs:
          - text: is
          - text: ' '
          - text: type
          - text: ' '
          - text: <
          - text: user.code_type
          - text: '>'
          - text: ':'
        - doc:
            docs:
            - text: user.code_insert_type_annotation
            - text: (
            - text: code_type
            - text: )
            - text: '

                '
          function: _inline
        info:
          hpad:
            text: ' '
          hsep:
            text: ' '
          min_col_widths: []
          table_type: command
    - alts:
      - docs:
        - text: returns
        - text: ' '
        - text: '['
        - text: type
        - text: ']'
        - text: ' '
        - text: <
        - text: user.code_type
        - text: '>'
        - text: ':'
        - doc:
            docs:
            - text: '

                '
            - text: user.code_insert_return_type
            - text: (
            - text: code_type
            - text: )
            - text: '

                '
          indent: 4
          overlap: false
      - cells:
        - docs:
          - text: returns
          - text: ' '
          - text: '['
          - text: type
          - text: ']'
          - text: ' '
          - text: <
          - text: user.code_type
          - text: '>'
          - text: ':'
        - doc:
            docs:
            - text: user.code_insert_return_type
            - text: (
            - text: code_type
            - text: )
            - text: '

                '
          function: _inline
        info:
          hpad:
            text: ' '
          hsep:
            text: ' '
          min_col_widths: []
          table_type: command
    - text: '

        '
    - text: '#'
    - text: ' '
    - text: for
    - text: ' '
    - text: generic
    - text: ' '
    - text: reference
    - text: ' '
    - text: of
    - text: ' '
    - text: types
    - text: '

        '
    - alts:
      - docs:
        - text: type
        - text: ' '
        - text: <
        - text: user.code_type
        - text: '>'
        - text: ':'
        - doc:
            docs:
            - text: '

                '
            - text: insert
            - text: (
            - text: code_type
            - text: )
            - text: '

                '
          indent: 4
          overlap: false
      - cells:
        - docs:
          - text: type
          - text: ' '
          - text: <
          - text: user.code_type
          - text: '>'
          - text: ':'
        - doc:
            docs:
            - text: insert
            - text: (
            - text: code_type
            - text: )
            - text: '

                '
          function: _inline
        info:
          hpad:
            text: ' '
          hsep:
            text: ' '
          min_col_widths: []
          table_type: command
  max_line_width: null
  renderer: simple
  simple_layout: ShortestLines
output: |
  tag: user.code_functions
  -
  # Default implementation of capture listens for the following keywords in any
  # order: private pro pub static
  #
  # The default action implementation looks for the token combination on the left
  # (funky is added here for searchability) and calls the function on the right:
  #
  #   * funky -> code_default_function
  #   * private funky -> code_private_function
  #   * pro funky -> code_protected_function
  #   * pub funky -> code_public_function
  #   * static funky -> code_private_static_function
  #   * private static funky -> code_private_static_function
  #   * pro static funky -> code_protected_static_function
  #   * pub static funky -> code_public_static_function
  #
  ^{user.code_function_modifier}* funky <user.text>$:
      user.code_modified_function(code_function_modifier_list or 0, text)

  # for annotating function parameters
  is type <user.code_type>:
      user.code_insert_type_annotation(code_type)
  returns [type] <user.code_type>:
      user.code_insert_return_type(code_type)

  # for generic reference of types
  type <user.code_type>:
      insert(code_type)
