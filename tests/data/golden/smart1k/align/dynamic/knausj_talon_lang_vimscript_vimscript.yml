input:
  doc:
    docs:
    - cells:
      - docs:
        - text: tag
        - text: ':'
      - text: user.vimscript
      info:
        hpad:
          text: ' '
        hsep:
          text: ' '
        min_col_widths: []
        table_type: match
    - text: '-'
    - text: '

        '
    - text: 'tag():'
    - text: ' '
    - text: user.code_imperative
    - text: '

        '
    - text: 'tag():'
    - text: ' '
    - text: user.code_operators_assignment
    - text: '

        '
    - text: 'tag():'
    - text: ' '
    - text: user.code_operators_math
    - text: '

        '
    - text: 'tag():'
    - text: ' '
    - text: user.code_comment_line
    - text: '

        '
    - text: '

        '
    - text: '#'
    - text: ' '
    - text: XXX
    - text: ' '
    - text: '-'
    - text: ' '
    - text: revisit
    - text: ' '
    - text: these
    - text: '

        '
    - text: 'settings():'
    - doc:
        docs:
        - text: '

            '
        - text: user.code_private_function_formatter
        - text: ' '
        - text: '='
        - text: ' '
        - doc:
            text: SNAKE_CASE
          function: _smart_quote
        - text: '

            '
        - text: user.code_protected_function_formatter
        - text: ' '
        - text: '='
        - text: ' '
        - doc:
            text: SNAKE_CASE
          function: _smart_quote
        - text: '

            '
        - text: user.code_public_function_formatter
        - text: ' '
        - text: '='
        - text: ' '
        - doc:
            text: SNAKE_CASE
          function: _smart_quote
        - text: '

            '
        - text: user.code_private_variable_formatter
        - text: ' '
        - text: '='
        - text: ' '
        - doc:
            text: SNAKE_CASE
          function: _smart_quote
        - text: '

            '
        - text: user.code_protected_variable_formatter
        - text: ' '
        - text: '='
        - text: ' '
        - doc:
            text: SNAKE_CASE
          function: _smart_quote
        - text: '

            '
        - text: user.code_public_variable_formatter
        - text: ' '
        - text: '='
        - text: ' '
        - doc:
            text: SNAKE_CASE
          function: _smart_quote
        - text: '

            '
      indent: 4
      overlap: false
    - text: '

        '
    - text: '#'
    - text: '

        '
    - text: '#'
    - text: ' '
    - text: VIM
    - text: ' '
    - text: Script
    - text: ' '
    - text: Specific
    - text: '

        '
    - text: '#'
    - text: '

        '
    - text: assign
    - text: ' '
    - text: '['
    - text: <
    - text: user.vimscript_scope
    - text: '>'
    - text: ']'
    - text: ' '
    - text: (
    - text: variable
    - text: ' '
    - text: '|'
    - text: ' '
    - text: var
    - text: )
    - text: ' '
    - text: '['
    - text: <
    - text: user.text
    - text: '>'
    - text: ']'
    - text: ' '
    - text: '['
    - text: over
    - text: ']'
    - text: ':'
    - doc:
        docs:
        - text: '

            '
        - text: insert
        - text: (
        - doc:
            docs:
            - text: let
            - text: ' '
          function: _smart_quote
        - text: )
        - text: '

            '
        - text: insert
        - text: (
        - text: vimscript_scope
        - text: ' '
        - text: or
        - text: ' '
        - doc:
            text: ''
          function: _smart_quote
        - text: )
        - text: '

            '
        - text: user.code_private_variable_formatter
        - text: (
        - text: text
        - text: )
        - text: '

            '
      indent: 4
      overlap: false
    - text: '

        '
    - text: '['
    - text: <
    - text: user.vimscript_scope
    - text: '>'
    - text: ']'
    - text: ' '
    - text: (
    - text: variable
    - text: ' '
    - text: '|'
    - text: ' '
    - text: var
    - text: )
    - text: ' '
    - text: '['
    - text: <
    - text: user.text
    - text: '>'
    - text: ']'
    - text: ' '
    - text: '['
    - text: over
    - text: ']'
    - text: ':'
    - doc:
        docs:
        - text: '

            '
        - text: insert
        - text: (
        - text: vimscript_scope
        - text: ' '
        - text: or
        - text: ' '
        - doc:
            text: ''
          function: _smart_quote
        - text: )
        - text: '

            '
        - text: user.code_private_variable_formatter
        - text: (
        - text: text
        - text: )
        - text: '

            '
      indent: 4
      overlap: false
    - text: '

        '
    - text: '#'
    - text: ' '
    - text: see
    - text: ' '
    - text: lang/vimscript/vimscript.py
    - text: ' '
    - text: for
    - text: ' '
    - text: list
    - text: '

        '
    - alts:
      - docs:
        - text: <
        - text: user.vimscript_functions
        - text: '>'
        - text: ':'
        - doc:
            docs:
            - text: '

                '
            - text: insert
            - text: (
            - doc:
                docs:
                - text: '{'
                - text: vimscript_functions
                - text: '}'
                - text: ' '
              function: _smart_quote
            - text: )
            - text: '

                '
          indent: 4
          overlap: false
      - cells:
        - docs:
          - text: <
          - text: user.vimscript_functions
          - text: '>'
          - text: ':'
        - doc:
            docs:
            - text: insert
            - text: (
            - doc:
                docs:
                - text: '{'
                - text: vimscript_functions
                - text: '}'
                - text: ' '
              function: _smart_quote
            - text: )
            - text: '

                '
          function: _inline
        info:
          hpad:
            text: ' '
          hsep:
            text: ' '
          min_col_widths: []
          table_type: command
    - text: '

        '
    - text: '#'
    - text: ' '
    - text: XXX
    - text: ' '
    - text: '-'
    - text: ' '
    - text: possibly
    - text: ' '
    - text: overlap
    - text: ' '
    - text: with
    - text: ' '
    - text: some
    - text: ' '
    - text: programming.talon
    - text: '

        '
    - alts:
      - docs:
        - alts:
          - docs:
            - text: state
            - text: ' '
            - text: command
            - text: ':'
            - doc:
                docs:
                - text: '

                    '
                - doc:
                    docs:
                    - text: command!
                    - text: ' '
                  function: _smart_quote
                - text: '

                    '
              indent: 4
              overlap: false
          - cells:
            - docs:
              - text: state
              - text: ' '
              - text: command
              - text: ':'
            - doc:
                docs:
                - doc:
                    docs:
                    - text: command!
                    - text: ' '
                  function: _smart_quote
                - text: '

                    '
              function: _inline
            info:
              hpad:
                text: ' '
              hsep:
                text: ' '
              min_col_widths: []
              table_type: command
        - alts:
          - docs:
            - text: state
            - text: ' '
            - text: end
            - text: ' '
            - text: if
            - text: ':'
            - doc:
                docs:
                - text: '

                    '
                - doc:
                    text: endif
                  function: _smart_quote
                - text: '

                    '
              indent: 4
              overlap: false
          - cells:
            - docs:
              - text: state
              - text: ' '
              - text: end
              - text: ' '
              - text: if
              - text: ':'
            - doc:
                docs:
                - doc:
                    text: endif
                  function: _smart_quote
                - text: '

                    '
              function: _inline
            info:
              hpad:
                text: ' '
              hsep:
                text: ' '
              min_col_widths: []
              table_type: command
        - alts:
          - docs:
            - text: state
            - text: ' '
            - text: end
            - text: ' '
            - text: for
            - text: ':'
            - doc:
                docs:
                - text: '

                    '
                - doc:
                    text: endfor
                  function: _smart_quote
                - text: '

                    '
              indent: 4
              overlap: false
          - cells:
            - docs:
              - text: state
              - text: ' '
              - text: end
              - text: ' '
              - text: for
              - text: ':'
            - doc:
                docs:
                - doc:
                    text: endfor
                  function: _smart_quote
                - text: '

                    '
              function: _inline
            info:
              hpad:
                text: ' '
              hsep:
                text: ' '
              min_col_widths: []
              table_type: command
        - alts:
          - docs:
            - text: state
            - text: ' '
            - text: end
            - text: ' '
            - text: while
            - text: ':'
            - doc:
                docs:
                - text: '

                    '
                - doc:
                    text: endwhile
                  function: _smart_quote
                - text: '

                    '
              indent: 4
              overlap: false
          - cells:
            - docs:
              - text: state
              - text: ' '
              - text: end
              - text: ' '
              - text: while
              - text: ':'
            - doc:
                docs:
                - doc:
                    text: endwhile
                  function: _smart_quote
                - text: '

                    '
              function: _inline
            info:
              hpad:
                text: ' '
              hsep:
                text: ' '
              min_col_widths: []
              table_type: command
        - alts:
          - docs:
            - text: state
            - text: ' '
            - text: end
            - text: ' '
            - text: function
            - text: ':'
            - doc:
                docs:
                - text: '

                    '
                - doc:
                    text: endfunction
                  function: _smart_quote
                - text: '

                    '
              indent: 4
              overlap: false
          - cells:
            - docs:
              - text: state
              - text: ' '
              - text: end
              - text: ' '
              - text: function
              - text: ':'
            - doc:
                docs:
                - doc:
                    text: endfunction
                  function: _smart_quote
                - text: '

                    '
              function: _inline
            info:
              hpad:
                text: ' '
              hsep:
                text: ' '
              min_col_widths: []
              table_type: command
        - alts:
          - docs:
            - text: state
            - text: ' '
            - text: continue
            - text: ':'
            - doc:
                docs:
                - text: '

                    '
                - doc:
                    text: continue
                  function: _smart_quote
                - text: '

                    '
              indent: 4
              overlap: false
          - cells:
            - docs:
              - text: state
              - text: ' '
              - text: continue
              - text: ':'
            - doc:
                docs:
                - doc:
                    text: continue
                  function: _smart_quote
                - text: '

                    '
              function: _inline
            info:
              hpad:
                text: ' '
              hsep:
                text: ' '
              min_col_widths: []
              table_type: command
      - rows:
        - cells:
          - docs:
            - text: state
            - text: ' '
            - text: command
            - text: ':'
          - doc:
              docs:
              - doc:
                  docs:
                  - text: command!
                  - text: ' '
                function: _smart_quote
              - text: '

                  '
            function: _inline
          info:
            hpad:
              text: ' '
            hsep:
              text: ' '
            min_col_widths: []
            table_type: command
        - cells:
          - docs:
            - text: state
            - text: ' '
            - text: end
            - text: ' '
            - text: if
            - text: ':'
          - doc:
              docs:
              - doc:
                  text: endif
                function: _smart_quote
              - text: '

                  '
            function: _inline
          info:
            hpad:
              text: ' '
            hsep:
              text: ' '
            min_col_widths: []
            table_type: command
        - cells:
          - docs:
            - text: state
            - text: ' '
            - text: end
            - text: ' '
            - text: for
            - text: ':'
          - doc:
              docs:
              - doc:
                  text: endfor
                function: _smart_quote
              - text: '

                  '
            function: _inline
          info:
            hpad:
              text: ' '
            hsep:
              text: ' '
            min_col_widths: []
            table_type: command
        - cells:
          - docs:
            - text: state
            - text: ' '
            - text: end
            - text: ' '
            - text: while
            - text: ':'
          - doc:
              docs:
              - doc:
                  text: endwhile
                function: _smart_quote
              - text: '

                  '
            function: _inline
          info:
            hpad:
              text: ' '
            hsep:
              text: ' '
            min_col_widths: []
            table_type: command
        - cells:
          - docs:
            - text: state
            - text: ' '
            - text: end
            - text: ' '
            - text: function
            - text: ':'
          - doc:
              docs:
              - doc:
                  text: endfunction
                function: _smart_quote
              - text: '

                  '
            function: _inline
          info:
            hpad:
              text: ' '
            hsep:
              text: ' '
            min_col_widths: []
            table_type: command
        - cells:
          - docs:
            - text: state
            - text: ' '
            - text: continue
            - text: ':'
          - doc:
              docs:
              - doc:
                  text: continue
                function: _smart_quote
              - text: '

                  '
            function: _inline
          info:
            hpad:
              text: ' '
            hsep:
              text: ' '
            min_col_widths: []
            table_type: command
  max_line_width: 1000
  renderer: smart
  simple_layout: null
output: |
  tag: user.vimscript
  -
  tag(): user.code_imperative
  tag(): user.code_operators_assignment
  tag(): user.code_operators_math
  tag(): user.code_comment_line

  # XXX - revisit these
  settings():
      user.code_private_function_formatter = "SNAKE_CASE"
      user.code_protected_function_formatter = "SNAKE_CASE"
      user.code_public_function_formatter = "SNAKE_CASE"
      user.code_private_variable_formatter = "SNAKE_CASE"
      user.code_protected_variable_formatter = "SNAKE_CASE"
      user.code_public_variable_formatter = "SNAKE_CASE"

  #
  # VIM Script Specific
  #
  assign [<user.vimscript_scope>] (variable | var) [<user.text>] [over]:
      insert("let ")
      insert(vimscript_scope or "")
      user.code_private_variable_formatter(text)

  [<user.vimscript_scope>] (variable | var) [<user.text>] [over]:
      insert(vimscript_scope or "")
      user.code_private_variable_formatter(text)

  # see lang/vimscript/vimscript.py for list
  <user.vimscript_functions>: insert("{vimscript_functions} ")

  # XXX - possibly overlap with some programming.talon
  state command:      "command! "
  state end if:       "endif"
  state end for:      "endfor"
  state end while:    "endwhile"
  state end function: "endfunction"
  state continue:     "continue"
